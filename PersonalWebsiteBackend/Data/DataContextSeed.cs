using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Octokit;
using PersonalWebsiteBackend.Domain;
using PersonalWebsiteBackend.Extensions;
using PersonalWebsiteBackend.Options;
using Project = PersonalWebsiteBackend.Domain.Project;

namespace PersonalWebsiteBackend.Data
{
    public static class DataContextSeed
    {
        public static async Task SeedDefaultUserAsync(UserManager<ApplicationUser> userManager,
            RoleManager<IdentityRole> roleManager, IConfiguration config)
        {
            var seedAdminProfile = new SeedAdminProfile();
            config.Bind(nameof(seedAdminProfile), seedAdminProfile);

            var administratorRole = new IdentityRole(seedAdminProfile.IdentityRoleName);

            if (roleManager.Roles.All(r => r.Name != administratorRole.Name))
            {
                await roleManager.CreateAsync(administratorRole);
            }

            var administrator = new ApplicationUser()
            {
                Email = seedAdminProfile.Email,
                UserName = seedAdminProfile.Email
            };

            if (userManager.Users.All(u => u.Email != administrator.Email))
            {
                await userManager.CreateAsync(administrator, seedAdminProfile.Password);
                await userManager.AddToRolesAsync(administrator, new[] {administratorRole.Name});
            }
        }

        public static async Task SeedProjectDataAsync(UserManager<ApplicationUser> userManager, DataContext context, IConfiguration config)
        {
            if (!context.Projects.Any())
            {
                // get admin
                var seedAdminProfile = new SeedAdminProfile();
                config.Bind(nameof(seedAdminProfile), seedAdminProfile);
                var user = await userManager.FindByEmailAsync(seedAdminProfile.Email);

                var githubSettings = new GithubSettings();
                config.Bind(nameof(githubSettings), githubSettings);
                var client = new GitHubClient(new ProductHeaderValue("personal-website"));
                // using personal access token
                // https://docs.github.com/en/github/authenticating-to-github/about-authentication-to-github
                // https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token
                var tokenAuth = new Credentials(githubSettings.GithubApiPersonalAccessToken);
                client.Credentials = tokenAuth;
                var repositoryUser = await client.User.Current();
                IEnumerable<Repository> repositories = await client.Repository.GetAllForCurrent();
                foreach (Repository repository in repositories)
                {
                    // login == login-name
                    if(repository.Owner.Login == repositoryUser.Login)
                    {
                        Project project = repository.ConvertToProject();
                        project.UserId = user.Id;
                        await context.AddAsync(project);
                    }
                }

                var created = await context.SaveChangesAsync();
                if(created == 0)
                    throw new Exception("Error: No database entries got generated by seeding.");
            }
        }
    }
}